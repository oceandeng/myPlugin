/**
 * jQuery EasyUI 1.3.1
 * 
 * Licensed under the GPL terms
 * To use it on other terms please contact us
 *
 * Copyright(c) 2009-2012 stworthy [ stworthy@gmail.com ] 
 * 
 */
(function($) {
    $.parser = {
        auto: true,
        onComplete: function(_1) {},
        plugins: ["draggable", "droppable", "resizable", "pagination", "linkbutton", "menu", "menubutton", "splitbutton", "progressbar", "tree", "combobox", "combotree", "combogrid", "numberbox", "validatebox", "searchbox", "numberspinner", "timespinner", "calendar", "datebox", "datetimebox", "slider", "layout", "panel", "datagrid", "propertygrid", "treegrid", "tabs", "accordion", "window", "dialog"],
        parse: function(_2) {
            var aa = [];
            for (var i = 0; i < $.parser.plugins.length; i++) {
                var _3 = $.parser.plugins[i];
                var r = $(".easyui-" + _3, _2);
                if (r.length) {
                    if (r[_3]) {
                        r[_3]();
                    } else {
                        aa.push({ name: _3, jq: r });
                    }
                }
            }
            if (aa.length && window.easyloader) {
                var _4 = [];
                for (var i = 0; i < aa.length; i++) {
                    _4.push(aa[i].name);
                }
                easyloader.load(_4, function() {
                    for (var i = 0; i < aa.length; i++) {
                        var _5 = aa[i].name;
                        var jq = aa[i].jq;
                        jq[_5]();
                    }
                    $.parser.onComplete.call($.parser, _2);
                });
            } else {
                $.parser.onComplete.call($.parser, _2);
            }
        },
        parseOptions: function(_6, _7) {
            var t = $(_6);
            var _8 = {};
            var s = $.trim(t.attr("data-options"));
            if (s) {
                var _9 = s.substring(0, 1);
                var _a = s.substring(s.length - 1, 1);
                if (_9 != "{") {
                    s = "{" + s;
                }
                if (_a != "}") {
                    s = s + "}";
                }
                _8 = (new Function("return " + s))();
            }
            if (_7) {
                var _b = {};
                for (var i = 0; i < _7.length; i++) {
                    var pp = _7[i];
                    if (typeof pp == "string") {
                        if (pp == "width" || pp == "height" || pp == "left" || pp == "top") {
                            _b[pp] = parseInt(_6.style[pp]) || undefined;
                        } else {
                            _b[pp] = t.attr(pp);
                        }
                    } else {
                        for (var _c in pp) {
                            var _d = pp[_c];
                            if (_d == "boolean") {
                                _b[_c] = t.attr(_c) ? (t.attr(_c) == "true") : undefined;
                            } else {
                                if (_d == "number") {
                                    _b[_c] = t.attr(_c) == "0" ? 0 : parseFloat(t.attr(_c)) || undefined;
                                }
                            }
                        }
                    }
                }
                $.extend(_8, _b);
            }
            return _8;
        }
    };




    $(function() {
        if (!window.easyloader && $.parser.auto) {
            $.parser.parse();
        }
    });
    $.fn._outerWidth = function(_e) {
        if (_e == undefined) {
            if (this[0] == window) {
                return this.width() || document.body.clientWidth;
            }
            return this.outerWidth() || 0;
        }
        return this.each(function() {
            if (!$.support.boxModel) { //&&$.browser.msie
                $(this).width(_e);
            } else {
                $(this).width(_e - ($(this).outerWidth() - $(this).width()));
            }
        });
    };
    $.fn._outerHeight = function(_f) {
        if (_f == undefined) {
            if (this[0] == window) {
                return this.height() || document.body.clientHeight;
            }
            return this.outerHeight() || 0;
        }
        return this.each(function() {
            if (!$.support.boxModel) { //&&$.browser.msie
                $(this).height(_f);
            } else {
                $(this).height(_f - ($(this).outerHeight() - $(this).height()));
            }
        });
    };
    $.fn._propAttr = $.fn.prop || $.fn.attr;
})(jQuery);
// calender
(function($) {
    function _3d5(_3d6) {
        var opts = $.data(_3d6, "calendar").options;
        var t = $(_3d6);
        if (opts.fit == true) {
            var p = t.parent();
            opts.width = p.width();
            opts.height = p.height();
        }
        var _3d7 = t.find(".calendar-header");
        t._outerWidth(opts.width);
        t._outerHeight(opts.height);
        t.find(".calendar-body")._outerHeight(t.height() - _3d7._outerHeight());
    };

    function init(_3d8) {
        $(_3d8).addClass("calendar").wrapInner("<div class=\"calendar-header\">" + "<div class=\"calendar-prevmonth\"></div>" + "<div class=\"calendar-nextmonth\"></div>" + "<div class=\"calendar-prevyear\"></div>" + "<div class=\"calendar-nextyear\"></div>" + "<div class=\"calendar-title\">" + "<span>Aprial 2010</span>" + "</div>" + "</div>" + "<div class=\"calendar-body\">" + "<div class=\"calendar-menu\">" + "<div class=\"calendar-menu-year-inner\">" + "<span class=\"calendar-menu-prev\"></span>" + "<span><input class=\"calendar-menu-year\" type=\"text\"></input></span>" + "<span class=\"calendar-menu-next\"></span>" + "</div>" + "<div class=\"calendar-menu-month-inner\">" + "</div>" + "</div>" + "</div>");
        $(_3d8).find(".calendar-title span").hover(function() {
            $(this).addClass("calendar-menu-hover");
        }, function() {
            $(this).removeClass("calendar-menu-hover");
        }).click(function() {
            var menu = $(_3d8).find(".calendar-menu");
            if (menu.is(":visible")) {
                menu.hide();
            } else {
                _3df(_3d8);
            }
        });
        $(".calendar-prevmonth,.calendar-nextmonth,.calendar-prevyear,.calendar-nextyear", _3d8).hover(function() {
            $(this).addClass("calendar-nav-hover");
        }, function() {
            $(this).removeClass("calendar-nav-hover");
        });
        $(_3d8).find(".calendar-nextmonth").click(function() {
            _3d9(_3d8, 1);
        });
        $(_3d8).find(".calendar-prevmonth").click(function() {
            _3d9(_3d8, -1);
        });
        $(_3d8).find(".calendar-nextyear").click(function() {
            _3dc(_3d8, 1);
        });
        $(_3d8).find(".calendar-prevyear").click(function() {
            _3dc(_3d8, -1);
        });
        $(_3d8).bind("_resize", function() {
            var opts = $.data(_3d8, "calendar").options;
            if (opts.fit == true) {
                _3d5(_3d8);
            }
            return false;
        });
    };

    function _3d9(_3da, _3db) {
        var opts = $.data(_3da, "calendar").options;
        opts.month += _3db;
        if (opts.month > 12) {
            opts.year++;
            opts.month = 1;
        } else {
            if (opts.month < 1) {
                opts.year--;
                opts.month = 12;
            }
        }
        show(_3da);
        var menu = $(_3da).find(".calendar-menu-month-inner");
        menu.find("td.calendar-selected").removeClass("calendar-selected");
        menu.find("td:eq(" + (opts.month - 1) + ")").addClass("calendar-selected");
    };

    function _3dc(_3dd, _3de) {
        var opts = $.data(_3dd, "calendar").options;
        opts.year += _3de;
        show(_3dd);
        var menu = $(_3dd).find(".calendar-menu-year");
        menu.val(opts.year);
    };

    function _3df(_3e0) {
        var opts = $.data(_3e0, "calendar").options;
        $(_3e0).find(".calendar-menu").show();
        if ($(_3e0).find(".calendar-menu-month-inner").is(":empty")) {
            $(_3e0).find(".calendar-menu-month-inner").empty();
            var t = $("<table></table>").appendTo($(_3e0).find(".calendar-menu-month-inner"));
            var idx = 0;
            for (var i = 0; i < 3; i++) {
                var tr = $("<tr></tr>").appendTo(t);
                for (var j = 0; j < 4; j++) {
                    $("<td class=\"calendar-menu-month\"></td>").html(opts.months[idx++]).attr("abbr", idx).appendTo(tr);
                }
            }
            $(_3e0).find(".calendar-menu-prev,.calendar-menu-next").hover(function() {
                $(this).addClass("calendar-menu-hover");
            }, function() {
                $(this).removeClass("calendar-menu-hover");
            });
            $(_3e0).find(".calendar-menu-next").click(function() {
                var y = $(_3e0).find(".calendar-menu-year");
                if (!isNaN(y.val())) {
                    y.val(parseInt(y.val()) + 1);
                }
            });
            $(_3e0).find(".calendar-menu-prev").click(function() {
                var y = $(_3e0).find(".calendar-menu-year");
                if (!isNaN(y.val())) {
                    y.val(parseInt(y.val() - 1));
                }
            });
            $(_3e0).find(".calendar-menu-year").keypress(function(e) {
                if (e.keyCode == 13) {
                    _3e1();
                }
            });
            $(_3e0).find(".calendar-menu-month").hover(function() {
                $(this).addClass("calendar-menu-hover");
            }, function() {
                $(this).removeClass("calendar-menu-hover");
            }).click(function() {
                var menu = $(_3e0).find(".calendar-menu");
                menu.find(".calendar-selected").removeClass("calendar-selected");
                $(this).addClass("calendar-selected");
                _3e1();
            });
        }

        function _3e1() {
            var menu = $(_3e0).find(".calendar-menu");
            var year = menu.find(".calendar-menu-year").val();
            var _3e2 = menu.find(".calendar-selected").attr("abbr");
            if (!isNaN(year)) {
                opts.year = parseInt(year);
                opts.month = parseInt(_3e2);
                show(_3e0);
            }
            menu.hide();
        };
        var body = $(_3e0).find(".calendar-body");
        var sele = $(_3e0).find(".calendar-menu");
        var _3e3 = sele.find(".calendar-menu-year-inner");
        var _3e4 = sele.find(".calendar-menu-month-inner");
        _3e3.find("input").val(opts.year).focus();
        _3e4.find("td.calendar-selected").removeClass("calendar-selected");
        _3e4.find("td:eq(" + (opts.month - 1) + ")").addClass("calendar-selected");
        sele._outerWidth(body._outerWidth());
        sele._outerHeight(body._outerHeight());
        _3e4._outerHeight(sele.height() - _3e3._outerHeight());
    };

    function _3e5(_3e6, year, _3e7) {
        var opts = $.data(_3e6, "calendar").options;
        var _3e8 = [];
        var _3e9 = new Date(year, _3e7, 0).getDate();
        for (var i = 1; i <= _3e9; i++) {
            _3e8.push([year, _3e7, i]);
        }
        var _3ea = [],
            week = [];
        var _3eb = 0;
        while (_3e8.length > 0) {
            var date = _3e8.shift();
            week.push(date);
            var day = new Date(date[0], date[1] - 1, date[2]).getDay();
            if (_3eb == day) {
                day = 0;
            } else {
                if (day == (opts.firstDay == 0 ? 7 : opts.firstDay) - 1) {
                    _3ea.push(week);
                    week = [];
                }
            }
            _3eb = day;
        }
        if (week.length) {
            _3ea.push(week);
        }
        var _3ec = _3ea[0];
        if (_3ec.length < 7) {
            while (_3ec.length < 7) {
                var _3ed = _3ec[0];
                var date = new Date(_3ed[0], _3ed[1] - 1, _3ed[2] - 1);
                _3ec.unshift([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
            }
        } else {
            var _3ed = _3ec[0];
            var week = [];
            for (var i = 1; i <= 7; i++) {
                var date = new Date(_3ed[0], _3ed[1] - 1, _3ed[2] - i);
                week.unshift([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
            }
            _3ea.unshift(week);
        }
        var _3ee = _3ea[_3ea.length - 1];
        while (_3ee.length < 7) {
            var _3ef = _3ee[_3ee.length - 1];
            var date = new Date(_3ef[0], _3ef[1] - 1, _3ef[2] + 1);
            _3ee.push([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
        }
        if (_3ea.length < 6) {
            var _3ef = _3ee[_3ee.length - 1];
            var week = [];
            for (var i = 1; i <= 7; i++) {
                var date = new Date(_3ef[0], _3ef[1] - 1, _3ef[2] + i);
                week.push([date.getFullYear(), date.getMonth() + 1, date.getDate()]);
            }
            _3ea.push(week);
        }
        return _3ea;
    };

    function show(_3f0) {
        var opts = $.data(_3f0, "calendar").options;
        $(_3f0).find(".calendar-title span").html(opts.months[opts.month - 1] + " " + opts.year);
        var body = $(_3f0).find("div.calendar-body");
        body.find(">table").remove();
        var t = $("<table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><thead></thead><tbody></tbody></table>").prependTo(body);
        var tr = $("<tr></tr>").appendTo(t.find("thead"));
        for (var i = opts.firstDay; i < opts.weeks.length; i++) {
            tr.append("<th>" + opts.weeks[i] + "</th>");
        }
        for (var i = 0; i < opts.firstDay; i++) {
            tr.append("<th>" + opts.weeks[i] + "</th>");
        }
        var _3f1 = _3e5(_3f0, opts.year, opts.month);
        for (var i = 0; i < _3f1.length; i++) {
            var week = _3f1[i];
            var tr = $("<tr></tr>").appendTo(t.find("tbody"));
            for (var j = 0; j < week.length; j++) {
                var day = week[j];
                $("<td class=\"calendar-day calendar-other-month\"></td>").attr("abbr", day[0] + "-" + day[1] + "-" + day[2]).html(day[2]).appendTo(tr);
            }
        }
        t.find("td[abbr^=\"" + opts.year + "-" + opts.month + "\"]").removeClass("calendar-other-month");
        var now = new Date();
        var _3f2 = now.getFullYear() + "-" + (now.getMonth() + 1) + "-" + now.getDate();
        t.find("td[abbr=\"" + _3f2 + "\"]").addClass("calendar-today");
        if (opts.current) {
            t.find(".calendar-selected").removeClass("calendar-selected");
            var _3f3 = opts.current.getFullYear() + "-" + (opts.current.getMonth() + 1) + "-" + opts.current.getDate();
            t.find("td[abbr=\"" + _3f3 + "\"]").addClass("calendar-selected");
        }
        var _3f4 = 6 - opts.firstDay;
        var _3f5 = _3f4 + 1;
        if (_3f4 >= 7) {
            _3f4 -= 7;
        }
        if (_3f5 >= 7) {
            _3f5 -= 7;
        }
        t.find("tr").find("td:eq(" + _3f4 + ")").addClass("calendar-saturday");
        t.find("tr").find("td:eq(" + _3f5 + ")").addClass("calendar-sunday");
        t.find("td").hover(function() {
            $(this).addClass("calendar-hover");
        }, function() {
            $(this).removeClass("calendar-hover");
        }).click(function() {
            t.find(".calendar-selected").removeClass("calendar-selected");
            $(this).addClass("calendar-selected");
            var _3f6 = $(this).attr("abbr").split("-");

            opts.current = new Date(_3f6[0], parseInt(_3f6[1]) - 1, _3f6[2]);
            opts.onSelect.call(_3f0, opts.current);
        });
    };
    $.fn.calendar = function(_3f7, _3f8) {
        if (typeof _3f7 == "string") {
            return $.fn.calendar.methods[_3f7](this, _3f8);
        }
        _3f7 = _3f7 || {};
        return this.each(function() {
            var _3f9 = $.data(this, "calendar");
            if (_3f9) {
                $.extend(_3f9.options, _3f7);
            } else {
                _3f9 = $.data(this, "calendar", { options: $.extend({}, $.fn.calendar.defaults, $.fn.calendar.parseOptions(this), _3f7) });
                init(this);
            }
            if (_3f9.options.border == false) {
                $(this).addClass("calendar-noborder");
            }
            _3d5(this);
            show(this);
            $(this).find("div.calendar-menu").hide();
        });
    };
    $.fn.calendar.methods = {
        options: function(jq) {
            return $.data(jq[0], "calendar").options;
        },
        resize: function(jq) {
            return jq.each(function() {
                _3d5(this);
            });
        },
        moveTo: function(jq, date) {
            return jq.each(function() {
                $(this).calendar({ year: date.getFullYear(), month: date.getMonth() + 1, current: date });
            });
        }
    };
    $.fn.calendar.parseOptions = function(_3fa) {
        var t = $(_3fa);
        return $.extend({}, $.parser.parseOptions(_3fa, ["width", "height", { firstDay: "number", fit: "boolean", border: "boolean" }]));
    };
    $.fn.calendar.defaults = {
        width: 180,
        height: 180,
        fit: false,
        border: true,
        firstDay: 0,
        /*weeks:["S","M","T","W","T","F","S"]*/
        weeks: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
        /*months:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]*/
        months: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
        year: new Date().getFullYear(),
        month: new Date().getMonth() + 1,
        current: new Date(),
        onSelect: function(date) {}
    };
})(jQuery);